
#支持比list更多的索引方式
创建数组：b = np.array([])
	将list a转成numpy数组：array = np.array(a)
	定义numpy数组类型（位数越小，所占用的空间越小）：
	array = np.array([[1, 2, 3],
                  [4, 5, 6]], dtype=np.int64)
	将numpy数组转成list a：a = array.tolist()
	创建全部为0的数组：array = np.zeros((3, 4)) # (3, 4)定义三行四列
	创建全部为1的数组：array = np.ones((3, 4), dtype=np.int16) # (3, 4)定义三行四列
	创建全部为空的数组：array = np.empty((3, 5))
	创建一个有序的数组：array = np.arange(10, 20, 2) # 像range，从10到19，step = 2
	创建一个有序的数组，并且定义形状：array = np.arange(12).reshape((3, 4))
	创建一个有规律的分段的数组：array = np.linspace(0, 10, 6).reshape((2, 3))
	获取数组的维度：print(array.ndim)
	获取数组的形状（行列数）：print(array.shape)
	获取数组的元素总和：print(array.size)
	获取数组的类型：print(array.dtype)

数组的运算：a = np.array([10, 20, 30, 40])
			b = np.arange(4)
		加法运算：c = a + b
		减法运算：c = a - b
		乘法运算：c = a * b
		除法运算：c = a / b
		sin计算：np.sin(a)
		cos计算：np.cos(a)
		tan计算：np.tan(a)
		数组的所有元素的和：a.sum() 或者 np.sum(a)
		求中位数：np.median(a)
		数组的所有元素的平均值：a.mean() 或者 np.mean(a)
		数组里的最小值：a.min() 或者 np.min(a)
		最小值的索引：a.argmin() 或者 np.argmin(a)
		数组里的最大值：a.max() 或者 np.max(a)
		最大值的索引：a.argmax() 或者 np.argmax(a)
		行中的运算：总和 a.sum(axis=1) 或者 np.sum(a, axis=1)
					最小值 a.min(axis=1) 或者 np.min(a, axis=1)
					最小值的索引：a.argmin(axis=1) 或者 np.argmin(a, axis=1)
					最大值 a.max(axis=1) 或者 np.max(a, axis=1)
					最大值的索引：a.argmax(axis=1) 或者 np.argmax(a, axis=1)
		列中的运算：总和 a.sum(axis=0) 或者 np.sum(a, axis=0)
					最小值 a.min(axis=0) 或者 np.min(a, axis=0)
					最小值的索引：a.argmin(axis=0) 或者 np.argmin(a, axis=0)
					最大值 a.max(axis=0) 或者 np.max(a, axis=0)
					最大值的索引：a.argmax(axis=0) 或者 np.argmax(a, axis=0)
		判断数组的值：print(array < 5) print(array == 5) print(array > 5)
		数组元素累加：a.cumsum() 或者 np.cumsum(a)
		数组元素累差：np.diff(a)
		获取数组非零行列索引：np.nonzero(a)
		对数组进行排序：np.sort(a)
		数组里行列倒置：np.transpose(a) 或者 a.T
		将数组抹平：a.flatten() # flatten()为功能函数，直接将二维数组抹平，但如果要进行循环迭代，用flat迭代器也可以
		限定最大最小值（所有超过范围的都取最大或最小值）：a.clip(10, 20) 或者 np.clip(a, 10, 20)
		在行上面加一个维度：a[np.newaxis, :]
		在列上面加一个维度：a[:, np.newaxis]
		
数组的合并：
	A = np.array([[1, 1, 1],
				  ['a', 'b', 'c']])
	B = np.array([[2, 2, 2],
				  ['d', 'e', 'f']])
	垂直合并：np.vstack((A, B)) # 每个数组每一行每一行地装上去
	水平合并：np.hstack((A, B)) # 每个数组同一行先合并再装上去
	指定维度的合并：np.concatenate((A, B), axis=0) # 一维数组axis只能为0
	
数组的分割：
	A = np.arange(12).reshape((3, 4))
	对等分割行：np.split(A, 3, axis=0) 或者 np.vsplit(A, 3)
	对等分割列：np.split(A, 2, axis=1) 或者 np.hsplit(A, 2)
	不等分割行：np.array_split(A, 2, axis=0)
	不等分割列：np.array_split(A, 3, axis=1)
		
二维数组的索引：
	普通索引：a[2][0]
	同一中括号索引：a[2, 0]
	切片索引：a[2, :] # 第三行所有数
			  a[:, 2] # 第三列所有数
			  a[2, 1:] # 第三行第一位之后的所有数
			  a[1:, 2] # 第三列第一位之后的所有数
			  a[2, 1:3] # 第三行第一位到第三位的所有数
	迭代行：for row in a:
				print(row)
	迭代列：for column in a.T:
				print(column)
	将数组抹平后迭代：for item in a.flat:
						  print(item)
	
二维数组的运算：a = np.array([[0, 2],
							  [1, 3]])

				b = np.arange(8).reshape((2, 4))
		普通乘法：c = a * b
		矩阵乘法：d = np.dot(a, b) 或者 d = a.dot(b)
		
数组中的复制：
		a = np.arange(12)
		浅复制（改变数组a或b的元素的值，其它的跟着改变）：b = a 			# b is a == True
		深复制（改变数组a或b的元素的值，其它的不改变）：b = a.copy()    # b is a == False
	
函数装配vectorize(): numpy装配使得其函数可以应用在numpy数组上 lencount = np.vectorize(lambda x: len(x))


随机数
	创建一个0~1随机数构成的2行4列的数组：a = np.random.random((2, 4))
	生成6个随机数： np.random.rand(6)
	返回一个具有正在分布的随机数构成的6行4列的数组：np.random.randn(6, 4)
	
	
np.nan # 生成一个类型为float的NaN的空字符